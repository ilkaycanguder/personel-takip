// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend_employee_management.Data;

#nullable disable

namespace backend_employee_management.Migrations
{
    [DbContext(typeof(EmployeeManagementDbContext))]
    [Migration("20240810141943_AddIsDeletedToJobs")]
    partial class AddIsDeletedToJobs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend_employee_management.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Assignedto")
                        .HasColumnType("integer")
                        .HasColumnName("assignedto");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Createdby")
                        .HasColumnType("integer")
                        .HasColumnName("createdby");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("jobs_pkey");

                    b.HasIndex("Assignedto");

                    b.HasIndex("Createdby");

                    b.ToTable("jobs", (string)null);
                });

            modelBuilder.Entity("backend_employee_management.Models.Jobupdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int?>("Jobid")
                        .HasColumnType("integer")
                        .HasColumnName("jobid");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("integer")
                        .HasColumnName("updatedby");

                    b.Property<string>("Updatetype")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("updatetype");

                    b.HasKey("Id")
                        .HasName("jobupdates_pkey");

                    b.HasIndex("Jobid");

                    b.HasIndex("Updatedby");

                    b.ToTable("jobupdates", (string)null);
                });

            modelBuilder.Entity("backend_employee_management.Models.Passwordupdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Newpasswordhash")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("newpasswordhash");

                    b.Property<string>("Oldpasswordhash")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("oldpasswordhash");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("passwordupdates_pkey");

                    b.HasIndex("Userid");

                    b.ToTable("passwordupdates", (string)null);
                });

            modelBuilder.Entity("backend_employee_management.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Rolename")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rolename");

                    b.HasKey("Id")
                        .HasName("roles_pkey");

                    b.HasIndex(new[] { "Rolename" }, "roles_rolename_key")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("backend_employee_management.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("tasks_pkey");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("backend_employee_management.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "users_username_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("backend_employee_management.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("userroles_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("userroles", (string)null);
                });

            modelBuilder.Entity("backend_employee_management.Models.Job", b =>
                {
                    b.HasOne("backend_employee_management.Models.User", "AssignedtoNavigation")
                        .WithMany("JobAssignedtoNavigations")
                        .HasForeignKey("Assignedto")
                        .HasConstraintName("jobs_assignedto_fkey");

                    b.HasOne("backend_employee_management.Models.User", "CreatedbyNavigation")
                        .WithMany("JobCreatedbyNavigations")
                        .HasForeignKey("Createdby")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("jobs_createdby_fkey");

                    b.Navigation("AssignedtoNavigation");

                    b.Navigation("CreatedbyNavigation");
                });

            modelBuilder.Entity("backend_employee_management.Models.Jobupdate", b =>
                {
                    b.HasOne("backend_employee_management.Models.Job", "Job")
                        .WithMany("Jobupdates")
                        .HasForeignKey("Jobid")
                        .HasConstraintName("jobupdates_jobid_fkey");

                    b.HasOne("backend_employee_management.Models.User", "UpdatedbyNavigation")
                        .WithMany("Jobupdates")
                        .HasForeignKey("Updatedby")
                        .HasConstraintName("jobupdates_updatedby_fkey");

                    b.Navigation("Job");

                    b.Navigation("UpdatedbyNavigation");
                });

            modelBuilder.Entity("backend_employee_management.Models.Passwordupdate", b =>
                {
                    b.HasOne("backend_employee_management.Models.User", "User")
                        .WithMany("Passwordupdates")
                        .HasForeignKey("Userid")
                        .HasConstraintName("passwordupdates_userid_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend_employee_management.Models.UserRole", b =>
                {
                    b.HasOne("backend_employee_management.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("userroles_roleid_fkey");

                    b.HasOne("backend_employee_management.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("userroles_userid_fkey");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend_employee_management.Models.Job", b =>
                {
                    b.Navigation("Jobupdates");
                });

            modelBuilder.Entity("backend_employee_management.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("backend_employee_management.Models.User", b =>
                {
                    b.Navigation("JobAssignedtoNavigations");

                    b.Navigation("JobCreatedbyNavigations");

                    b.Navigation("Jobupdates");

                    b.Navigation("Passwordupdates");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
